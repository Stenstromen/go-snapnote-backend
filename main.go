package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/gorilla/mux"
	"github.com/rs/cors"
)

type FormData struct {
	ID    int         `json:"id"`
	Title string      `json:"title"`
	Body  string      `json:"body"`
	Image interface{} `json:"image"`
	Delta struct {
		Ops []interface{} `json:"ops"`
	} `json:"delta"`
}

/* type AutoGenerated struct {
	ID    int         `json:"id"`
	Title string      `json:"title"`
	Body  string      `json:"body"`
	Image interface{} `json:"image"`
	Delta struct {
		Ops []interface{} `json:"ops"`
	} `json:"delta"`
} */

func main() {
	router := mux.NewRouter()

	router.HandleFunc("/post", createFormData).Methods("POST")
	router.HandleFunc("/get/{noteid}", getFormData).Methods("GET")

	corsOptions := cors.Options{
		AllowedOrigins: []string{"http://example.com", "http://localhost:5173"},
		AllowedMethods: []string{"GET", "POST"},
		AllowedHeaders: []string{"Content-Type", "Authorization"},
	}

	corsHandler := cors.New(corsOptions).Handler(router)

	log.Println("Server started on port 8080")
	log.Fatal(http.ListenAndServe(":8080", corsHandler))
}

func createFormData(w http.ResponseWriter, r *http.Request) {
	var formData FormData
	err := json.NewDecoder(r.Body).Decode(&formData)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = insertFormData(formData)
	if err != nil {
		http.Error(w, "Failed to insert data", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
	fmt.Fprintln(w, "Data inserted successfully")
}

func getFormData(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	noteID := vars["noteid"]

	fmt.Println("noteid:", noteID)

	formData, err := getFormDataByNoteID(noteID)
	if err != nil {
		if err == sql.ErrNoRows {
			http.Error(w, "Note not found", http.StatusNotFound)
		} else {
			http.Error(w, "Failed to retrieve data", http.StatusInternalServerError)
		}
		return
	}

	jsonData, err := json.Marshal(formData)
	if err != nil {
		http.Error(w, "Failed to marshal JSON", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(jsonData)
}

func getFormDataByNoteID(noteID string) (FormData, error) {
	// Replace with your MySQL connection details
	username, password, hostname, database := os.Getenv("DB_USERNAME"), os.Getenv("DB_PASSWORD"), os.Getenv("DB_HOST"), os.Getenv("DB_DATABASE")
	dsn := fmt.Sprintf("%s:%s@tcp(%s:3306)/%s", username, password, hostname, database)

	// Connect to the MySQL database
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		return FormData{}, err
	}
	defer db.Close()

	// Prepare the SELECT statement
	stmt, err := db.Prepare("SELECT json_data FROM your_table WHERE noteid = ?")
	if err != nil {
		return FormData{}, err
	}
	defer stmt.Close()

	// Execute the SELECT statement
	row := stmt.QueryRow(noteID)

	// Retrieve the JSON data
	var jsonData []byte
	err = row.Scan(&jsonData)
	if err != nil {
		if err == sql.ErrNoRows {
			return FormData{}, fmt.Errorf("no data found for noteid: %s", noteID)
		}
		return FormData{}, err
	}

	// Unmarshal the JSON data into FormData
	var formData FormData
	err = json.Unmarshal(jsonData, &formData)
	if err != nil {
		return FormData{}, err
	}

	return formData, nil
}

func insertFormData(formData FormData) error {
	username, password, hostname, database := os.Getenv("DB_USERNAME"), os.Getenv("DB_PASSWORD"), os.Getenv("DB_HOST"), os.Getenv("DB_DATABASE")
	dsn := fmt.Sprintf("%s:%s@tcp(%s:3306)/%s", username, password, hostname, database)

	// Connect to the MySQL database
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		return err
	}
	defer db.Close()

	// Create the table if it doesn't exist
	createTableQuery := `CREATE TABLE IF NOT EXISTS your_table (
		id INT PRIMARY KEY AUTO_INCREMENT,
		noteid VARCHAR(8),
		json_data JSON
	)`
	_, err = db.Exec(createTableQuery)
	if err != nil {
		return err
	}

	// Generate a random noteid value
	noteID := generateRandomNoteID()

	// Convert FormData to JSON
	jsonData, err := json.Marshal(formData)
	if err != nil {
		return err
	}

	// Prepare the INSERT statement
	stmt, err := db.Prepare("INSERT INTO your_table (noteid, json_data) VALUES (?, ?)")
	if err != nil {
		return err
	}
	defer stmt.Close()

	// Execute the INSERT statement
	_, err = stmt.Exec(noteID, jsonData)
	if err != nil {
		return err
	}

	fmt.Println("Data inserted successfully", noteID)
	return nil
}

func generateRandomNoteID() string {
	// Characters to be used in the random noteid
	charSet := "0123456789abcdefghijklmnopqrstuvwxyz"

	// Seed the random number generator
	rand.Seed(time.Now().UnixNano())

	// Generate a random noteid of length 8
	noteID := make([]byte, 8)
	for i := range noteID {
		noteID[i] = charSet[rand.Intn(len(charSet))]
	}

	return string(noteID)
}
